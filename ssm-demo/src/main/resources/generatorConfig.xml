<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
		PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
		"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	<!-- 加载驱动配置properties文件 -->
	<properties resource="application.properties" />
	<!-- MySQL数据库驱动包位置 -->
	<classPathEntry
		location="E:/Java/maven/repository/mysql/mysql-connector-java/5.1.30/mysql-connector-java-5.1.30.jar" />

	<context id="test" targetRuntime="org.mybatis.generator.plugins.table.TkMyBatis3Impl">
		<!-- JavaBean 实现 序列化 接口 -->
		<plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>
		<!-- genenat entity时,生成toString -->
		<plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
		<!-- 自定义物理分页 可生成支持Mysql数据的limit 不支持Oracle -->
		<plugin type="org.mybatis.generator.plugins.page.PaginationPlugin" />
		<!-- 自定义查询指定字段 -->
		<plugin type="org.mybatis.generator.plugins.field.FieldsPlugin" />
		<!-- 开启支持内存分页 可生成 支持内存分布的方法及参数 <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin" 
			/> -->
		<!-- generate entity时，生成hashcode和equals方法 <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" 
			/> -->
		<!-- 此处是将Example改名为Criteria 当然 想改成什么都行~ -->
		<plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
			<property name="searchString" value="Example$" />
			<!-- 替换后 <property name="replaceString" value="Criteria" /> -->
			<property name="replaceString" value="Query" />
		</plugin>
		<!-- 此处是将UserMapper.xml改名为UserDao.xml 当然 想改成什么都行~ -->
		<plugin type="org.mybatis.generator.plugins.rename.RenameSqlMapperPlugin">
			<property name="searchString" value="Mapper" />
			<property name="replaceString" value="Dao" />
		</plugin>

		<!-- 此处是将UserMapper改名为UserDao 接口 当然 想改成什么都行~ -->
		<plugin type="org.mybatis.generator.plugins.rename.RenameJavaMapperPlugin">
			<property name="searchString" value="Mapper$" />
			<property name="replaceString" value="Dao" />
		</plugin>

		<commentGenerator>
			<!-- 是否去除自动生成的时间注释 true：是 ， false：否 -->
			<property name="suppressDate" value="false" />
			<!-- 是否去除自动生成的注释 true：是 ， false：否 -->
			<property name="suppressAllComments" value="true" />
		</commentGenerator>
		<!-- 通过驱动配置文件导入的数据连接数据库 -->
		<jdbcConnection driverClass="${db.driverClassName}"
			connectionURL="${db.url}" userId="${db.username}" password="${db.password}" />

		<!-- java类型处理器 用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl； 注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 
			NUMERIC数据类型； -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>
		<!-- 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； -->
		<javaModelGenerator targetPackage="${po.package}"
			targetProject="${po.package.path}">
			<property name="enableSubPackages" value="false" />
			<property name="trimStrings" value="true" />
		</javaModelGenerator>
		<!-- 生成SQL map的XML文件生成器， 注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口）， 
			或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置 
			targetPackage/targetProject:同javaModelGenerator -->
		<sqlMapGenerator targetPackage="${mapper.package}"
			targetProject="${mapper.package.path}">
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>

		<!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 targetPackage/targetProject:同javaModelGenerator 
			type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）： 1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML； 
			2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中； 3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML； 
			注意：如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER -->
		<javaClientGenerator targetPackage="${dao.package}"
			targetProject="${dao.package.path}" type="XMLMAPPER">
			<property name="enableSubPackages" value="true" />
		</javaClientGenerator>

		<!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素 选择的table会生成一下文件： 1，SQL 
			map文件 2，生成一个主键类； 3，除了BLOB和主键的其他字段的类； 4，包含BLOB的类； 5，一个用户生成动态查询的条件类（selectByExample, 
			deleteByExample），可选； 6，Mapper接口（可选） tableName（必要）：要生成对象的表名； -->
		<table schema="" tableName="erp_companies%" domainObjectName="erp." mapperName="erp.{0}"
			enableCountByExample="false" enableUpdateByExample="false"
			enableDeleteByExample="false" enableSelectByExample="false"
			selectByExampleQueryId="false">
			<generatedKey column="id" sqlStatement="MySql"
				identity="true" />
		</table>
	</context>
</generatorConfiguration>