<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://mybatis.org/schema/mybatis-spring 
		   http://mybatis.org/schema/mybatis-spring.xsd
		   http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<!-- 启用注解扫描，并定义组件查找规则 ，除了@controller，扫描所有的Bean -->
	<context:component-scan base-package="priv.cjb.demo">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!--加载properties配置文件 -->
	<context:property-placeholder location="classpath:application.properties"
		ignore-unresolvable="true" />

	<!-- 启用 @AspectJ -->
	<aop:aspectj-autoproxy />

	<!-- 启用支持annotation注解方式事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- ****************************************************************** -->

	<!-- mybatis:scan会将cn.edu.tju.rico.mapper包里的所有接口当作mapper配置，之后可以自动引入mapper类 -->
	<mybatis:scan base-package="com.learning.demo.dao" />

	<!-- ****************************************************************** -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="${db.initialSize}" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="${db.maxActive}" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="${db.maxIdle}" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="${db.minIdle}" />
		<!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 -->
		<property name="maxWait" value="${db.maxWait}" />
		<!--#给出一条简单的sql语句进行验证 -->
		<!--<property name="validationQuery" value="select getdate()" /> -->
		<property name="defaultAutoCommit" value="${db.defaultAutoCommit}" />
		<!-- 回收被遗弃的（一般是忘了释放的）数据库连接到连接池中 -->
		<!--<property name="removeAbandoned" value="true" /> -->
		<!-- 数据库连接过多长时间不用将被视为被遗弃而收回连接池中 -->
		<!--<property name="removeAbandonedTimeout" value="120" /> -->
		<!-- #连接的超时时间，默认为半小时。 -->
		<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />

		<!--# 失效检查线程运行时间间隔，要小于MySQL默认 -->
		<property name="timeBetweenEvictionRunsMillis" value="40000" />
		<!--# 检查连接是否有效 -->
		<property name="testWhileIdle" value="true" />
		<!--# 检查连接有效性的SQL语句 -->
		<property name="validationQuery" value="SELECT 1 FROM dual" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="${mapper.locations}"></property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!--自动扫描，将Mapper接口生成代理注入Spring中 -->
	<bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="priv.cjb.demo.dao" />
	</bean>

	<!-- 注解方式启用声明 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<!-- 实例化transactionManager事件类 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="tokenManager" class="priv.cjb.demo.authorization.DefaultTokenManager" />

	<!-- 定义事件的范围以及传播类型 -->
	<!--<tx:advice id="txAdvice"> <tx:attributes> <tx:method name="get*" read-only="true"/> 
		<tx:method name="transfer*" propagation="REQUIRED"/> <tx:method name="update*" 
		propagation="NESTED" rollback-for="java.lang.Exception"/> </tx:attributes> 
		</tx:advice> -->

	<!-- 用切面方式配置事务 -->
	<!--<aop:config> <aop:pointcut expression="execution(* com.practice.service..*(..))" 
		id="transactionMethod"/> <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionMethod"/> 
		</aop:config> -->

</beans>